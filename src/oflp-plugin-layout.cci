//  ############################################################################
//
//                      CB WORKSPACES & PROJECTS LAYOUTS
//
//  ############################################################################
void    OpenFilesListPlus::Layout::     Filename_cb_to_oflp(
    wxString        _in_filename    ,
    wxString    &   _out_filename   ,
    int             _type           )
{
    wxString            sfx     =   wxString::FromUTF8(".oflp.layout");
    //  ........................................................................
    _out_filename   =   _in_filename;
    _out_filename.Append(sfx);
}

void    OpenFilesListPlus::Layout::     dump_project_manager()
{
    earlgreycb::Log_function_mark( wxS("p0_dump_project_manager()"));

    ProjectManager* pjm = Manager::Get()->GetProjectManager();

    GWR_TKI("  Workspace loading:[%i]", pjm->IsLoadingWorkspace()   );
    GWR_TKI("  Workspace closing:[%i]", pjm->IsClosingWorkspace()   );
    GWR_TKI("  Project   loading:[%i]", pjm->IsLoadingProject()     );
    GWR_TKI("  Project   closing:[%i]", pjm->IsClosingProject()     );
    GWR_TKI("  Project   l/c    :[%i]", pjm->IsLoadingOrClosing()   );
}
//  ############################################################################
//                              XML stuff ( boring )
//  ############################################################################
bool    OpenFilesListPlus::Layout::     xml_load_document       (wxString& _filename, TiXmlDocument* _doc)
{
    if ( ! TinyXML::LoadDocument(_filename, _doc) )
        return false;

    return true;
}

bool    OpenFilesListPlus::Layout::     xml_load_workspace      (cbWorkspace* _wsp, TiXmlDocument* _doc)
{
    wxString    wspfn;
    //  ........................................................................
    //  build oflp workspace layout filename
    Filename_cb_to_oflp( _wsp->GetFilename(), wspfn, 1 );

    //  load the xml file & return it
    return xml_load_document(wspfn, _doc);
}

bool    OpenFilesListPlus::Layout::     xml_load_project        (cbProject* _pro, TiXmlDocument* _doc)
{
    wxString    profn;
    //  ........................................................................
    //  build oflp workspace layout filename
    Filename_cb_to_oflp( _pro->GetFilename(), profn, 2 );
    //  ........................................................................
    //  load the xml file & return it
    return xml_load_document(profn, _doc);
}

bool    OpenFilesListPlus::Layout::     xml_save_workspace      ()
{
    //  - no TiXml constructore are available in plugins ( why : ??? ). So      //  _GWR_KNO_
    //    every TiXml object has to be new-allocated
    //  ........................................................................
    bool                    bret    =   TRUE;

    cbWorkspace         *   wsp     =   Manager::Get()->GetProjectManager()->GetWorkspace();
    OFLPPanel           *   panel   =   NULL;

    const   char        *   ROOT_TAG    =  "CodeBlocks_workspace_oflp_file";
            wxString        wspfn;
            wxString        psix;

    TiXmlDocument       *   doc         =   NULL;
    TiXmlDeclaration    *   docdec      =   NULL;
    TiXmlElement        *   rootnode    =   NULL;
    TiXmlElement        *   panelsnode  =   NULL;
    TiXmlElement        *   panelnode   =   NULL;
    TiXmlElement        *   xe1         =   NULL;
    TiXmlElement        *   xe2         =   NULL;
    TiXmlElement        *   xe3         =   NULL;
    TiXmlElement        *   xe4         =   NULL;
    //  ........................................................................
    //  build oflp workspace layout filename
    Filename_cb_to_oflp( wsp->GetFilename(), wspfn, 1 );
    //  ........................................................................
    //  xml stuff - pre
    doc     =   new TiXmlDocument();
    docdec  =   new TiXmlDeclaration("1.0", "UTF-8", "yes");

    doc->SetCondenseWhiteSpace(false);
    doc->InsertEndChild(*docdec);

    xe1         =   new TiXmlElement(ROOT_TAG);
    rootnode    =   static_cast<TiXmlElement*>(doc->InsertEndChild(*xe1));
    if ( ! rootnode )
        goto lab_failure;

    xe2         =   new TiXmlElement("FileVersion");
    xe2->SetAttribute("major", OFLP_FILE_VERSION_MAJOR_STR);
    xe2->SetAttribute("minor", OFLP_FILE_VERSION_MINOR_STR);
    if ( ! rootnode->InsertEndChild(*xe2) )
        goto lab_failure;

    xe3         =   new TiXmlElement("Panels");
    panelsnode  =   static_cast<TiXmlElement*>( rootnode->InsertEndChild(*xe3) );
    if ( ! panelsnode )
        goto lab_failure;
    //  ........................................................................
    //  xml stuff - layout
    for ( OpenFilesListPlus::PanelArray::const_iterator
        it  =   panels()->array().begin()   ;
        it  !=  panels()->array().end()     ;
        it++                                )
    {
        panel = (*it);

        if ( panel == panels()->bulk() )
            continue;

        xe4         =   new TiXmlElement("Panel");
        panelnode   =   static_cast< TiXmlElement* >( panelsnode->InsertEndChild(*xe4) );
        if ( ! panelnode )
            goto lab_failure;

        psix.Clear();
        psix << panels()->get_visual_index(panel);

        panelnode->SetAttribute( "name"  , cbU2C(panel->get_title() ));
        panelnode->SetAttribute( "index" , cbU2C(psix               ));

        delete xe4;
    }
    //  ........................................................................
    //  write file
    bret = cbSaveTinyXMLDocument(doc, wspfn);
    //  ........................................................................
    if ( xe1 )  delete xe1;
    if ( xe2 )  delete xe2;
    if ( xe3 )  delete xe3;

    return bret;
    //  ........................................................................
lab_failure:
    if ( doc )  delete doc;
    if ( xe1 )  delete xe1;
    if ( xe2 )  delete xe2;
    if ( xe3 )  delete xe3;
    if ( xe4 )  delete xe4;

    return FALSE;
}

bool    OpenFilesListPlus::Layout::     xml_save_project        (cbProject* _pro)
{
    //  - no TiXml constructore are available in plugins ( why : ??? ). So      //  _GWR_KNO_
    //    every TiXml object has to be new-allocated
    //  ........................................................................
    bool                bret        =   TRUE;
    ProjectManager  *   promgr      =   Manager::Get()->GetProjectManager();
    int i,c;
    EditorBase      *   edb         =   NULL;
    ProjectFile     *   pjf         =   NULL;
    wxString            pjfn;
    cbProject       *   pro         =   NULL;
    OFLPPanel       *   panel       =   NULL;

    const   char        *   ROOT_TAG    = "CodeBlocks_project_oflp_file";
            wxString        profn;

    TiXmlDocument   *   doc         =   NULL;
    TiXmlDeclaration*   docdec      =   NULL;
    TiXmlElement    *   rootnode    =   NULL;
    TiXmlElement    *   filenode    =   NULL;
    TiXmlElement    *   xe1         =   NULL;
    TiXmlElement    *   xe2         =   NULL;
    TiXmlElement    *   xe3         =   NULL;
    //  ........................................................................
    //  build oflp workspace layout filename
    Filename_cb_to_oflp( _pro->GetFilename(), profn, 2 );
    //  ........................................................................
    //  xml stuff - pre
    doc     =   new TiXmlDocument();
    docdec  =   new TiXmlDeclaration("1.0", "UTF-8", "yes");

    doc->SetCondenseWhiteSpace(false);
    doc->InsertEndChild(*docdec);

    xe1         =   new TiXmlElement(ROOT_TAG);
    rootnode    =   static_cast<TiXmlElement*>(doc->InsertEndChild(*xe1));
    if ( ! rootnode )
        goto lab_failure;

    xe2         =   new TiXmlElement("FileVersion");
    xe2->SetAttribute("major", OFLP_FILE_VERSION_MAJOR_STR);
    xe2->SetAttribute("minor", OFLP_FILE_VERSION_MINOR_STR);
    if ( ! rootnode->InsertEndChild(*xe2) )
        goto lab_failure;
    //  ........................................................................
    //  xml stuff - layout
    //  FindProjectForFile() inconsistency on project closing -> djb2 on complete filename
    //  ........................................................................
    //  xml stuff - layout
    c = _pro->GetFilesCount();

    for ( i = 0 ; i != c ; i++ )
    {
        pjf     =   _pro->GetFile(i);

        if ( pjf->editorOpen )
        {
            pjfn    =   pjf->file.GetFullPath();
            panel   =   panels()->get_from_absolute_filepath( pjfn );

            if ( panel )
            {
                if ( panel != panels()->bulk() )
                {
                    GWR_TKI("xml_save_project():+[%s] -> [%s]",
                        pjf->relativeFilename.wc_str()  ,
                        panel->get_title().wc_str()     );

                    xe3 =   new TiXmlElement("File");
                    filenode = static_cast< TiXmlElement* >( rootnode->InsertEndChild(*xe3) );
                    if ( ! filenode )
                        goto lab_failure;

                    filenode->SetAttribute( "name"  , cbU2C(pjf->relativeFilename   ));
                    filenode->SetAttribute( "panel" , cbU2C(panel->get_title()      ));

                    delete xe3;
                }
            }
        }
        else
        {
            GWR_TKI("xml_save_project(): [%s] not found in any panel",
                pjf->relativeFilename.wc_str()  );
        }
    }
    //  ........................................................................
    //  write file
    bret    =   cbSaveTinyXMLDocument(doc, profn);
    //  ........................................................................
lab_exit:
    if ( doc )  delete doc;
    if ( xe1 )  delete xe1;
    if ( xe2 )  delete xe2;

    return bret;
    //  ........................................................................
lab_failure:
    if ( doc )  delete doc;
    if ( xe1 )  delete xe1;
    if ( xe2 )  delete xe2;
    if ( xe3 )  delete xe3;

    return FALSE;
}

bool    OpenFilesListPlus::Layout::     xml_parse_workspace     (TiXmlDocument* _doc)
{
    TiXmlElement*   root    =   _doc->FirstChildElement("CodeBlocks_workspace_oflp_file");
    if ( ! root )
    {
        //GetpMsg()->DebugLog(_T("Not a valid Code::Blocks workspace file..."));
        return false;
    }

    TiXmlElement*   panels  =   root->FirstChildElement("Panels");
    if ( ! panels )
    {
        //GetpMsg()->DebugLog(_T("No 'Panels' element in file..."));
        return false;
    }

    TiXmlElement* panel     =   panels->FirstChildElement("Panel");
    while ( panel )
    {
        long        u       =   0;
        wxString    name    =   cbC2U( panel->Attribute("name") );
        wxString    index   =   cbC2U( panel->Attribute("index") );

        if ( ! index.ToLong(&u) )
        {
            GWR_TKE("xml_parse_workspace():panel[%s] index[%s] - index could not be transformed to int",
                name.wc_str(), index.wc_str());
            return false;
        }
        GWR_TKI("xml_parse_workspace():panel[%s] index[%s]", name.wc_str(), index.wc_str());

        a_panel_assignment_array.Add( new PanelAssignment(name, static_cast< int >( u )) );

                    panel   =   panel->NextSiblingElement("Panel");
    }

    return true;
}

OpenFilesListPlus::Layout::ProjectAssignments*
        OpenFilesListPlus::Layout::     xml_parse_project       (cbProject* _project, TiXmlDocument* _doc)
{
    ProjectAssignments  *   pa  =   NULL;
    //  ------------------------------------------------------------------------
    //  first see if the project has not already been parsed :
    //  - workspace loading : "project-opened" events are sent before
    //    "workspace-loaded" event, but on_workspace_loading_complete() delete
    //    all assignments
    //  - reloading of project
    for ( ProjectAssignmentsArray::iterator
        it  =   a_project_assignments_array.begin() ;
        it  !=  a_project_assignments_array.end()   ;
        it++                                        )
    {
        pa  =   (*it);

        if ( pa->project() == _project )
        {
            GWR_TKI("xml_parse_project():project[%s] already parsed", _project->GetTitle().wc_str());
            return pa;
        }
    }
    //  ------------------------------------------------------------------------
    //  parse
    TiXmlElement*   root    =   _doc->FirstChildElement("CodeBlocks_project_oflp_file");
    if ( ! root )
    {
        //GetpMsg()->DebugLog(_T("Not a valid Code::Blocks workspace file..."));
        return NULL;
    }

    pa = new ProjectAssignments(_project);

    TiXmlElement*   file    =   root->FirstChildElement("File");
    while ( file )
    {
        wxString    name    =   cbC2U( file->Attribute("name")  );
        wxString    panel   =   cbC2U( file->Attribute("panel") );

        wxString    wxfnstr(_project->GetBasePath());
        wxfnstr.Append(wxS("/"));
        wxfnstr.Append(name);
        wxFileName  wxfn(wxfnstr);

        GWR_TKI("xml_parse_project():file[%s] -> panel[%s]", name.wc_str(), panel.wc_str());

        pa->add( wxfn, name, panel );

                    file    =   file->NextSiblingElement("File");
    }

    return pa;
}
//  ############################################################################
//                              Assignments
//  ############################################################################
void        OpenFilesListPlus::Layout:: reset_assignments               ()
{
    for ( ProjectAssignmentsArray::iterator
        it  =   a_project_assignments_array.begin() ;
        it  !=  a_project_assignments_array.end()   ;
        it++                                        )
    {
        delete (*it);
    }
    a_project_assignments_array.Clear();

    for ( PanelAssignmentArray::iterator
        it  =   a_panel_assignment_array.begin()    ;
        it  !=  a_panel_assignment_array.end()      ;
        it++                                        )
    {
        delete (*it);
    }
    a_panel_assignment_array.Clear();
}

void        OpenFilesListPlus::Layout:: project_assignments_add             (ProjectAssignments* _pra)
{
    a_project_assignments_array.Add(_pra);
}

void        OpenFilesListPlus::Layout:: project_assignments_sub             (cbProject* _pro)
{
    ProjectAssignments  *   pa  =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::Layout::project_assignments_sub()"));
    //  ........................................................................
    for ( ProjectAssignmentsArray::iterator
        it  =   a_project_assignments_array.begin() ;
        it  !=  a_project_assignments_array.end()   ;
        it++                                        )
    {
        pa  =   (*it);

        if ( pa->project() == _pro )
        {
            a_project_assignments_array.Remove(pa);
            delete pa;
            GWR_TKI("              ...FileAssignment-s removed for project[%s]", _pro->GetTitle().wc_str());
            goto lab_exit;
        }
    }
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}

bool        OpenFilesListPlus::Layout:: p0_project_assignments_get_from_editor_base (
    EditorBase              *   _in_edb                     ,
    ProjectAssignments      *&  _out_project_assignments    ,
    ProjectFile             *&  _out_project_file           )
{
    bool                                bret        =   FALSE;

    ProjectManager              *       promgr      =   Manager::Get()->GetProjectManager();
    cbProject                   *       pro         =   NULL;

    ProjectAssignments          *       pa          =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::Layout::p0_project_assignments_get_from_editor_base()"));
    //  ........................................................................
    //  init outputs
    _out_project_assignments    =   NULL;
    _out_project_file           =   NULL;
    //  ........................................................................
    //  get the project the file belongs too ( if any )
    pro = promgr->FindProjectForFile(_in_edb->GetFilename(), &_out_project_file, false, false);

    if ( ! pro )
    {
        GWR_TKI("              ...no cbProject contains file[%s]", _in_edb->GetFilename().wc_str());
        goto lab_exit;
    }
    //  ........................................................................
    for ( ProjectAssignmentsArray::const_iterator                               //  iterates on all ProjectAssignments-s
        i1  =   a_project_assignments_array.begin() ;
        i1  !=  a_project_assignments_array.end()   ;
        i1++                                        )
    {
        pa  =   (*i1);

        //GWR_TKI("              ...comparing with cbProject[%p][%s] #fa[%i]",pa->project(), pa->project()->GetTitle().wc_str(), pa->array().size());

        if ( pa->project() != pro )
            continue;

        _out_project_assignments    =   pa;
        bret                        =   TRUE;
        break;
    }
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
    return bret;
}

bool        OpenFilesListPlus::Layout:: p0_file_assignment_get_from_editor_base     (
    EditorBase              *   _in_edb                     ,
    ProjectAssignments      *&  _out_project_assignments    ,
    FileAssignment          *&  _out_file_assignment        )
{
    bool                                bret        =   FALSE;

    ProjectManager              *       promgr      =   Manager::Get()->GetProjectManager();
    cbProject                   *       pro         =   NULL;
    ProjectFile                 *       pjf         =   NULL;

    ProjectAssignments          *       pa          =   NULL;
    FileAssignment              *       fa          =   NULL;

    OFLPPanel                   *       panel       =   NULL;

    earlgreycb::HString::tHash          hrfp        =   0;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::Layout::p0_assignment_get_from_editor_base()"));
    //  ........................................................................
    //  init outputs
    _out_project_assignments    =   NULL;
    _out_file_assignment        =   NULL;
    //  ........................................................................
    //  get the project the file belongs too ( if any )
    pro = promgr->FindProjectForFile(_in_edb->GetFilename(), &pjf, false, false);

    if ( ! pro )
    {
        GWR_TKI("              ...no cbProject contains file[%s]", _in_edb->GetFilename().wc_str());
        goto lab_exit;
    }
    GWR_TKI("              ...cbProject[%p][%s] contains file[%s]", pro, pro->GetTitle().wc_str(), _in_edb->GetFilename().wc_str());

    if ( ! pjf )
    {
        GWR_TKE("%s", wxS("              ...no ProjectFile found"));
        goto lab_exit;
    }

    hrfp    =   earlgreycb::HString::Hash( pjf->relativeFilename );
    //  ........................................................................
    for ( ProjectAssignmentsArray::const_iterator                               //  iterates on all ProjectAssignments-s
        i1  =   a_project_assignments_array.begin() ;
        i1  !=  a_project_assignments_array.end()   ;
        i1++                                        )
    {
        pa  =   (*i1);

        //GWR_TKI("              ...comparing with cbProject[%p][%s] #fa[%i]",pa->project(), pa->project()->GetTitle().wc_str(), pa->array().size());

        if ( pa->project() != pro )
            continue;

        for ( FileAssignmentArray::const_iterator                               //  iterates on all FileAssignment-s
            i2  =   pa->array().begin() ;
            i2  !=  pa->array().end()   ;
            i2++                        )
        {
            fa  =   (*i2);

            //D GWR_TKI("              ...comparing [%lu] with FileAssignment[%lu][%s]", hrfp, fa->hrfp(), fa->afp().wc_str());

            if ( fa->hrfp() != hrfp )
                continue;

            if ( fa->rfp().Cmp( pjf->relativeFilename ) )
                continue;

            //  here we are
            _out_project_assignments    =   pa;
            _out_file_assignment        =   fa;
            bret                        =   true;
            goto lab_exit;
        }
    }
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
    return bret;
}

OFLPPanel*  OpenFilesListPlus::Layout:: file_assignment_find_panel_from_editor_base (EditorBase* _nn_edb)
{
    ProjectAssignments  *   pa          =   NULL;
    FileAssignment      *   fa          =   NULL;

    OFLPPanel           *   panel       =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::Layout::file_assignment_find_panel_from_editor_base()"));

    if ( ! p0_file_assignment_get_from_editor_base( _nn_edb, pa, fa ) )
    {
        goto lab_exit;
    }
    //  ........................................................................
    panel   =   panels()->p0_get_by_name( fa->pname() );
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
    return panel;
}

void        OpenFilesListPlus::Layout:: file_assignment_update                      (
    EditorBase  *   _nn_edb         ,
    OFLPPanel   *   _nn_dst_panel   )
{
    ProjectAssignments  *   pa          =   NULL;
    FileAssignment      *   fa          =   NULL;
    ProjectFile         *   pjf         =   NULL;

    wxFileName              awxfn;
    wxString                rfp;
    OFLPPanel           *   panel       =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::Layout::file_assignment_update()"));
    //  ........................................................................
    if ( ! p0_file_assignment_get_from_editor_base( _nn_edb, pa, fa ) )
    {
        GWR_TKI("              ...no file assignment found for file[%s]", _nn_edb->GetFilename().wc_str());

        if ( ! p0_project_assignments_get_from_editor_base(_nn_edb, pa, pjf) )
        {
            GWR_TKI("              ...no project assignment found for file[%s]", _nn_edb->GetFilename().wc_str());
            goto lab_exit;
        }

        awxfn   =   wxFileName(_nn_edb->GetFilename());
        rfp     =   pjf->relativeFilename;

        goto lab_add;
    }
    //  ........................................................................
    panel   =   panels()->p0_get_by_name( fa->pname() );

    if ( ! panel )
    {
        GWR_TKI("              ...assignment found, but OFLPPanel not found[%s]",fa->pname().wc_str());
        goto lab_exit;
    }

    if ( panel == _nn_dst_panel )
    {
        GWR_TKI("              ...dst == src [%s], dropping !", panel->get_title().wc_str());
    }
    //  ........................................................................
    //  remove old assignment
    pa->sub(fa);
    //  ........................................................................
    awxfn   =   fa->awxfn();
    rfp     =   fa->rfp();
    //  ........................................................................
    //  create new assignment
lab_add:
    pa->add( awxfn, rfp, _nn_dst_panel->get_title() );
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}
//  ############################################################################
//                              Actions
//  ############################################################################
void    OpenFilesListPlus::Layout::     reset           ()
{
    reset_assignments();
}
//  ############################################################################
//                              Events
//  ############################################################################
void    OpenFilesListPlus::Layout::     workspace_load                  ()
{
    earlgreycb::Log_function_enter(wxS("Layout::workspace_load()"));
    //  ........................................................................
    ProjectManager  *   pjm     =   NULL;
    cbWorkspace     *   wsp     =   NULL;
    ProjectsArray   *   pja     =   NULL;
    cbProject       *   pro     =   NULL;
    TiXmlDocument   *   doc_wsp =   NULL;
    TiXmlDocument   *   doc_pro =   NULL;

    ProjectAssignments  *   pas =   NULL;
    //  ........................................................................
    //  get current workspace & projects
    pjm = Manager::Get()->GetProjectManager();
    wsp = pjm->GetWorkspace();
    pja = pjm->GetProjects();
    //  ........................................................................
    //assignments_reset();                                                        //  delete all current assignments
    //  ........................................................................
    //  load the oflp workspace layout
    doc_wsp =   new TiXmlDocument();

    if ( ! xml_load_workspace(wsp, doc_wsp) )
    {
        GWR_TKE("workspace_load():%s[%s]", wxS("oflp workspace xml layout _NOT_ loaded"), wsp->GetTitle().wc_str());
        goto lab_exit;
    }
    GWR_TKI("workspace_load():%s[%s]", wxS("oflp workspace xml layout loaded"), wsp->GetTitle().wc_str());
    //  ........................................................................
    //  parse for workspace
    xml_parse_workspace(doc_wsp);                                               //  add asignments for current workspace
    /*
    //  ........................................................................
    //  load the oflp project-s layout-s & parse them
    for ( ProjectsArray::iterator it = pja->begin() ; it != pja->end() ; it ++ )
    {
        pro     =   (*it);
        doc_pro =   new TiXmlDocument();

        if ( ! xml_load_project(pro, doc_pro) )
        {
            GWR_TKE("workspace_load():%s[%s]", wxS("oflp project xml layout _NOT_ loaded"), pro->GetFilename().wc_str());
            delete doc_pro; doc_pro = NULL;
            continue;
        }
        GWR_TKI("workspace_load():%s[%s]", wxS("oflp project xml layout loaded"), pro->GetFilename().wc_str());

        pas = xml_parse_project(pro, doc_pro);
        if ( pas )
            project_assignments_add(pas);
    }
    */
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}

bool    OpenFilesListPlus::Layout::     workspace_close                 ()
{
    earlgreycb::Log_function_enter(wxS("Layout::workspace_close()"));

    bool bret = workspace_save();

    earlgreycb::Log_function_exit();

    return bret;
}

bool    OpenFilesListPlus::Layout::     workspace_save                  ()
{
    earlgreycb::Log_function_enter(wxS("Layout::workspace_save()"));

    bool bret = xml_save_workspace();

    earlgreycb::Log_function_exit();

    return bret;
}

void    OpenFilesListPlus::Layout::     project_load                (cbProject* _pro)
{
    ProjectAssignments  *   pa  =   NULL;
    TiXmlDocument       *   doc =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("Layout::project_load()"));
    GWR_INF("project title[%s]", _pro->GetTitle().wc_str());
    //  ........................................................................
    //  load the project's oflp-layout
    doc =   new TiXmlDocument();

    if ( ! xml_load_project(_pro, doc) )
    {
        GWR_TKE("project_load():%s[%s]", wxS("oflp project xml layout _NOT_ loaded"), _pro->GetFilename().wc_str());
        delete doc; doc = NULL;
        goto lab_exit;
    }
    GWR_TKI("project_load():%s[%s]", wxS("oflp project xml layout loaded"), _pro->GetFilename().wc_str());
    //  ........................................................................
    //  parse the layout, convert it to FileAssignments and add it to
    //  ProjectAssignments
    pa = xml_parse_project(_pro, doc);
    if ( pa )
        a_project_assignments_array.Add(pa);
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus::Layout::     project_close               (cbProject* _pro)
{
    earlgreycb::Log_function_enter(wxS("Layout::project_close()"));

    project_save(_pro);

    project_assignments_sub(_pro);
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus::Layout::     project_save                (cbProject* _pro)
{
    earlgreycb::Log_function_enter(wxS("Layout::project_save()"));

    GWR_INF("project title[%s]", _pro->GetTitle().wc_str());

    xml_save_project(_pro);
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}
//  ############################################################################
//                              OpenFilesListPlus methods
//  ############################################################################


