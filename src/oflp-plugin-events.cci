//  ############################################################################
//
//                          EDITOR EVENTS
//
//  ############################################################################
void    OpenFilesListPlus:: evh_workspace_loading_complete  (CodeBlocksEvent& _e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_workspace_loading_complete()"));

    layout()->workspace_load();

    //
    for ( Layout::PanelAssignmentArray::const_iterator
        it  =   layout()->panel_assignment_array().begin()  ;
        it  !=  layout()->panel_assignment_array().end()    ;
        it++                                                )
    {
        panels()->p0_add( (*it)->name(), false );
    }

    RefreshOpenFilesLayout();

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_workspace_close_begin       (CodeBlocksEvent &_e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_workspace_close_begin()"));

    layout()->workspace_close();

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_workspace_close_complete    (CodeBlocksEvent &_e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_workspace_close_complete()"));

    reset();

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_project_open                (CodeBlocksEvent& _e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_project_open()"));

    layout()->project_load( _e.GetProject() );

    RefreshOpenFilesLayout();

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_project_close               (CodeBlocksEvent& _e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_project_close()"));

    GWR_TKI("project[%p] files:[%i]", _e.GetProject(), _e.GetProject()->GetFilesCount());

    layout()->project_close( _e.GetProject() );

    RefreshOpenFilesLayout();

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_project_save                (CodeBlocksEvent& _e)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_project_save()"));

    layout()->project_save( _e.GetProject() );

    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_editor_opened               (CodeBlocksEvent& event)
{
    //  this callback can be called when :
    //  - file opening
    //  - file reloading
    //  ........................................................................
    EditorBase  *   edb     =   NULL;
    OFLPPanel   *   panel   =   panels()->p0_bulk();
    wxString        s;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::evh_editor_opened()"));
    //  ........................................................................
    //D cb_event_dump(event);
    //  ........................................................................
    edb = event.GetEditor();
    //D editor_dump(edb);
    if ( ! edb )
    {
        GWR_TKE("%s", wxS("      ...editor is NULL"));
        goto lab_exit;
    }
    //  ........................................................................
    //  check if editor is already open ( case of reload )
    panel = panels()->find(edb);
    if ( panel )
    {
        GWR_TKI("      ...editor already open in panel[%s]", panel->get_title().wc_str());
        goto lab_exit;
    }
    //  ........................................................................
    //  add the editor
    editors()->add(edb);

    panels()->p0_resize();
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
    return;
}

void    OpenFilesListPlus:: evh_editor_closed       (CodeBlocksEvent& event)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_editor_closed()"));
    //  ........................................................................
    EditorBase  *   edb  =   event.GetEditor();
    if ( ! edb )
    {
        GWR_TKI("%s", wxS("      ...editor is NULL"));
        goto lab_exit;
    }

    RefreshOpenFileState(edb, true);
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
    return;
}

void    OpenFilesListPlus:: evh_editor_activated    (CodeBlocksEvent& event)    //  _GWR_KNO_   editors may be activated by tabs
{
    EditorBase  *   edb     =   NULL;
    ProjectFile *   pjf     =   NULL;
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::evh_editor_activated()"));
    //D cb_event_dump(event);
    //  ........................................................................
    edb  =   event.GetEditor();
    //D editor_dump(edb);
    if ( ! edb )
    {
        GWR_TKE("%s", wxS("      ...editor is NULL"));
        goto lab_exit;
    }
    //  ........................................................................
    //  if loading/closing workspace/project, skip RefreshOpenFileState()       //  _GWR_CB_TRICK_  _GWR_OPTIM_
    //  call
    if ( ProjectManager::IsBusy() )
    {
        GWR_TKI("%s", wxS("      ...Project manager is BUSY - dropping"));
        goto lab_exit;
    }
    //  ........................................................................
    //  if no shortname, skip the RefreshOpenFileState() call ( C::B sends an   //  _GWR_CB_TRICK_  _GWR_OPTIM_
    //  "activated" event with an empty-shortname before sending an "opened"
    //  event with a non-empty-shortname when opening a file )
    if ( edb->GetShortName().IsEmpty() )
    {
        GWR_TKI("%s", wxS("      ...shortname is EMPTY - dropping"));
        goto lab_exit;
    }
    //  ........................................................................
    RefreshOpenFileState(edb);
    //  ........................................................................
lab_exit:
    earlgreycb::Log_function_exit();
}

void    OpenFilesListPlus:: evh_editor_deactivated  (CodeBlocksEvent& event)
{
    //RefreshOpenFileState(event.GetEditor());
}

void    OpenFilesListPlus:: evh_editor_modified     (CodeBlocksEvent& event)
{
    //  Editor name changing is also a modification ; log for this is done
    //  in OFLPPanel::editor_sync()

    //earlgreycb::Log_function_enter(wxS("OFLP::evh_editor_modified()"));

    //RefreshOpenFileState(event.GetEditor());

    //earlgreycb::Log_function_exit();

    earlgreycb::Log_function_mark(wxS("OFLP::evh_editor_modified()"));
    RefreshOpenFileState(event.GetEditor());
}

void    OpenFilesListPlus:: evh_editor_saved        (CodeBlocksEvent& event)
{
    earlgreycb::Log_function_enter(wxS("OFLP::evh_editor_saved()"));

    RefreshOpenFileState(event.GetEditor());

    earlgreycb::Log_function_exit();
}
//  ############################################################################
//
//                          TREE ITEM EVENTS
//
//  ############################################################################
void OpenFilesListPlus::evh_tree_item_activated     (wxTreeEvent& event)
{
    OFLPPanelItemInfo   inf( event );
    //  ........................................................................
    earlgreycb::Log_function_enter(wxS("OFLP::OnTreeItemActivated()"));
    //  ........................................................................
    if (Manager::IsAppShuttingDown())
        goto lab_return;

    if ( ! inf.IsOk() )
        goto lab_return;

    //  In productivity mode, activation :
    //  - makes the corresponding editor the active editor ; since activation in
    //  wxWidgets correspond to a double click, that editor has already been
    //  made the active one.
    //  - reload the file
    if ( menu_options()->mode_productivity() )
    {
        //  reload the file
        Manager::Get()->GetEditorManager()->GetBuiltinEditor(inf.GetEditor())->Reload();
    }
    //  In standard mode, activation :
    //  - makes the corresponding editor the active editor
    if ( menu_options()->mode_standard() )
    {
        //  active selected editor
        Manager::Get()->GetEditorManager()->SetActiveEditor(inf.GetEditor());
    }
    //  ........................................................................
lab_return:
    earlgreycb::Log_function_exit();
}

// tree item right-clicked
void OpenFilesListPlus::evh_tree_item_right_click   (wxTreeEvent& event)
{
    OFLPPanelItemInfo   inf( event );
    //  ........................................................................
    //GWR_INF("%s", wxS("########## OpenFilesListPlus::OnTreeItemRightClick() ##########"));

    if (Manager::IsAppShuttingDown())
        return;

    if ( ! inf.IsOk() )
        return;

    wxPoint pt = inf.GetTree()->ClientToScreen(event.GetPoint());
    inf.GetEditor()->DisplayContextMenu(pt,mtOpenFilesList);
}

// tree sel changed
void OpenFilesListPlus::evh_tree_sel_changed        (wxTreeEvent &event)
{
    earlgreycb::Log_function_enter(wxS("OFLP::OnTreeSelChanged()"));
    //  ........................................................................
    //  ........................................................................
    OFLPPanelItemInfo   inf( event );
    //  ........................................................................

    if(Manager::IsAppShuttingDown())
        goto lab_return;

    if ( ! inf.IsOk() )
    {
        GWR_TKI("OnTreeSelChanged():invalid OFLPPanelDataObject for panel[%p]", event.GetEventObject());
        goto lab_return;
    }
    GWR_TKI("OnTreeSelChanged():[%p][%s]", inf.GetPanel(), inf.GetEditor()->GetShortName().wc_str());

    //  in productivity mode, selecting a file makes the corresponding editor
    //  the active editor
    if ( menu_options()->mode_productivity() )
    {
        //  active selected editor
        Manager::Get()->GetEditorManager()->SetActiveEditor(inf.GetEditor());
    }

    //  deselect any other wxTreeCtrl's selected item
    panels()->p0_unselect_except(inf.GetPanel());
    //  ........................................................................
lab_return:
    earlgreycb::Log_function_exit();

}
//  ############################################################################
//
//                          PANEL HEADER EVENTS
//
//  ############################################################################
void    OpenFilesListPlus::     evh_panel_header_button_clicked_add (wxCommandEvent& _e)
{
    panels()->p0_add(wxString::FromUTF8("panel"), false);

    panels()->p0_resize();
}

void    OpenFilesListPlus::     evh_panel_header_button_clicked_del (wxCommandEvent& _e)
{
    //  fasten your seatbelt for the cast
    //  event -> wxObject -> wxButton -> GetClientData() -> OFLPPanel*
    OFLPPanel   *   panel   = static_cast< OFLPPanel* >
    (
        ( static_cast< wxButton* >( _e.GetEventObject() ) )->GetClientData()
    );
    //  ........................................................................
    GWR_INF("OFLP::evh_panel_header_button_del_CLICKED():EventObject[%p] ClientData()[%p]",
        _e.GetEventObject(), panel);
    //  ........................................................................
    panels()->p0_sub(panel);

    panels()->p0_resize();
}

void    OpenFilesListPlus::     evh_panel_header_button_clicked_mm  (wxCommandEvent& _e)
{
    //  fasten your seatbelt for the cast
    //  event -> wxObject -> wxButton -> GetClientData() -> OFLPPanel*
    OFLPPanel   *   panel   = static_cast< OFLPPanel* >
    (
        ( static_cast< wxButton* >( _e.GetEventObject() ) )->GetClientData()
    );
    wxSizerItem *   sitem   = panels()->p0_sizer()->GetItem(panel);
    //  ........................................................................
    GWR_INF("OFLP::evh_panel_header_button_sh_CLICKED():EventObject[%p] ClientData()[%p] SizerItem[%p]",
        _e.GetEventObject(), panel, sitem);
    //  ........................................................................
    #ifdef  GWR_OFLP_SANITY_CHECKS                                              //  _GWR_SANITY_CHECK_
    if ( ! sitem )
    {
        GWR_ERR("%s", wxS("  NULL wxSizerItem"));
        return;
    }
    #endif
    //  ........................................................................
    if ( panel->is_minimized() )
    {
        GWR_INF("%s", wxS("  maximizing"));
        panel->maximize();
        sitem->SetProportion(1);
    }
    else
    {
        GWR_INF("%s", wxS("  minimizing"));
        panel->minimize();
        sitem->SetProportion(0);
    }
    panels()->p0_sizer()->Layout();
}

void    OpenFilesListPlus::     evh_panel_header_button_clicked_up  (wxCommandEvent& _e)
{
    //  fasten your seatbelt for the cast
    //  event -> wxObject -> wxButton -> GetClientData() -> OFLPPanel*
    OFLPPanel   *   panel = static_cast< OFLPPanel* >
    (
        ( static_cast< wxButton* >( _e.GetEventObject() ) )->GetClientData()
    );
    //  ........................................................................
    GWR_INF("OFLP::evh_panel_header_button_up_CLICKED():EventObject[%p] ClientData()[%p]",
        _e.GetEventObject(), panel);

    panels()->p0_move_up(panel);
}

void    OpenFilesListPlus::     evh_panel_header_button_clicked_down(wxCommandEvent& _e)
{
    //  fasten your seatbelt for the cast
    //  event -> wxObject -> wxButton -> GetClientData() -> OFLPPanel*
    OFLPPanel   *   panel = static_cast< OFLPPanel* >
    (
        ( static_cast< wxButton* >( _e.GetEventObject() ) )->GetClientData()
    );
    GWR_INF("OFLP::evh_panel_header_button_dn_CLICKED():EventObject[%p] ClientData()[%p]",
        _e.GetEventObject(), panel);

    panels()->p0_move_dn(panel);
}

void    OpenFilesListPlus::     evh_panel_header_button_clicked_opt (wxCommandEvent& _e)
{
    //  this handler is connect to a wxButton, so
    //  - _e.GetEventObject() is not NULL
    //  - _e.GetEventObject() can be casted to a wxWindow
    static_cast< wxWindow* >( _e.GetEventObject() )->PopupMenu(menu_options());
}
//  ############################################################################
//
//                          MENU EVENTS
//
//  ############################################################################
void    OpenFilesListPlus::     evh_menu_option_checked             (wxCommandEvent& _e)
{
    bool    lc  =   menu_options()->log_console();
    bool    lw  =   menu_options()->log_window();

    GWR_INF( "%s", wxS("EVENT MENU") );

    menu_options()->evh_menu_option_checked(_e);                                //  process event

    if ( ( ! lw ) &&     menu_options()->log_window()   )
    {
        GWR_INF( "%s", wxS("+log window") );
        earlgreycb::A_log_window =   true;
        earlgreycb::Log_window_open( Manager::Get()->GetAppWindow() );
    }
    if ( (   lw ) && ( ! menu_options()->log_window() ) )
    {
        GWR_INF( "%s", wxS("-log window") );
        earlgreycb::A_log_window =   false;
        earlgreycb::Log_window_close();
    }
}
